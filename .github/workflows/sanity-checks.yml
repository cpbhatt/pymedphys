name: Sanity Checks

on: [push]

jobs:
  Pre-Commit:
    runs-on: ubuntu-latest

    steps:
      - name: Extract branch name
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Test branch name
        run: |
          echo ${{ steps.extract_branch.outputs.branch }}
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - uses: actions/cache@v1
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-cache

      - name: Run Pre-Commit
        run: |
          pip install pre-commit
          pre-commit run --all-files
      - name: Fix any issues
        if: failure()
        run: |
          git config --local user.email "pre-commit-bot@pymedphys.com"
          git config --local user.name "PyMedPhys Pre-Commit Bot"
          git commit -m "Fix pre-commit failures" -a
          exit 1
      - name: Push changes
        if: failure()
        uses: ad-m/github-push-action@02b0b75
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.extract_branch.outputs.branch }}

  Tox:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu', 'macos', 'windows']
        toxenv: ['pylint', 'docs', 'doctest', 'slow', 'clean', 'pytest']
        include:
          - os: 'ubuntu'
            python-version: 3.6
          - os: 'windows'
            python-version: 3.8
          - os: 'macos'
            python-version: 3.7
        exclude:
          - os: 'windows'
            toxenv: 'pylint'
          - os: 'windows'
            toxenv: 'slow'
          - os: 'windows'
            toxenv: 'doctest'
          - os: 'macos'
            toxenv: 'slow'
          - os: 'macos'
            toxenv: 'pytest'
          - os: 'ubuntu'
            toxenv: 'pytest'

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Show python information
      run: |
        python -c "import sys; print(sys.version); print(sys.executable); print(sys.platform)"
        python -c "import platform; print(platform.machine()); print(platform.release())"

    - uses: actions/cache@v1
      with:
        path: ~/.pymedphys
        key: pymedphys-data-${{ hashFiles('**/hashes.json') }}

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install FreeTDS on MacOS
      if: matrix.os == 'macos'
      run: |
        brew install freetds

    - name: Upgrade pip, install poetry and tox
      run: |
        python -m pip install --upgrade pip poetry tox

    - name: Install Pandoc on Ubuntu
      if: matrix.toxenv == 'docs' && matrix.os == 'ubuntu'
      run: |
        sudo apt-get install -y pandoc

    - name: Install Pandoc on MacOS
      if: matrix.toxenv == 'docs' && matrix.os == 'macos'
      run: |
        brew install pandoc

    - name: Install Pandoc on Windows
      if: matrix.toxenv == 'docs' && matrix.os == 'windows'
      run: |
        choco install pandoc

    - name: Run Tox on Windows
      if: matrix.os == 'windows'
      run: |
        poetry run tox -e ${{ matrix.toxenv }}-win

    - name: Run Tox on Nix
      if: matrix.os == 'macos' || matrix.os == 'ubuntu'
      run: |
        poetry run tox -e ${{ matrix.toxenv }}-nix

  Cypress:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Install Cypress Dependencies
      uses: cypress-io/github-action@v1
      with:
        runTests: false
        working-directory: tests/e2e

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Show Python information
      run: |
        python -c "import sys; print(sys.version); print(sys.executable); print(sys.platform)"
        python -c "import platform; print(platform.machine()); print(platform.release())"

    - uses: actions/cache@v1
      with:
        path: ~/.pymedphys
        key: pymedphys-data-${{ hashFiles('**/hashes.json') }}

    - uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Upgrade pip, install poetry
      run: |
        python -m pip install --upgrade pip poetry

    - name: Run poetry install
      run: |
        poetry install --no-dev -E pytest

    - name: Download demo data
      run: |
        poetry run python -c "import pymedphys; pymedphys.zip_data_paths('mu-density-gui-e2e-data.zip')"

    - name: Run PyMedPhys GUI
      run: |
        poetry run pymedphys gui &

    - name: Cypress run
      uses: cypress-io/github-action@v1
      with:
        install: false
        record: true
        start: yarn start
        working-directory: tests/e2e
        wait-on: 'http://localhost:8501'
      env:
        # pass the Dashboard record key as an environment variable
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        host: localhost
        port: 8501

  WithUpdates:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu']
        python-version: [3.7]
        toxenv: ['pylint', 'pytest']

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Show python information
      run: |
        python -c "import sys; print(sys.version); print(sys.executable); print(sys.platform)"
        python -c "import platform; print(platform.machine()); print(platform.release())"

    - uses: actions/cache@v1
      with:
        path: ~/.pymedphys
        key: pymedphys-data-${{ hashFiles('**/hashes.json') }}

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install FreeTDS on MacOS
      if: matrix.os == 'macos'
      run: |
        brew install freetds

    - name: Upgrade pip, install poetry and tox
      run: |
        python -m pip install --upgrade pip poetry tox

    - name: Run initial poetry install
      run: |
        poetry install

    - name: Run poetry update
      run: |
        poetry update

    - name: Run Tox if anything has changed
      run: |
        git add -A && git diff HEAD --name-only --exit-code || poetry run tox -e ${{ matrix.toxenv }}


  Examples:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu']
        toxenv: ['stackoverflow']
        python-version: [3.8]

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Show python information
      run: |
        python -c "import sys; print(sys.version); print(sys.executable); print(sys.platform)"
        python -c "import platform; print(platform.machine()); print(platform.release())"

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Upgrade pip, install poetry and tox
      run: |
        python -m pip install --upgrade pip poetry tox

    - name: Run Tox
      run: |
        poetry run tox -e ${{ matrix.toxenv }}
